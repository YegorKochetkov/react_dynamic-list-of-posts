{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","api/posts.ts","components/PostDetails/PostDetails.tsx","components/UserSelect/UserSelect.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPostId","setSelectedPostId","handleVisibilityOfDetails","useCallback","id","className","map","post","userId","title","type","onClick","BASE_URL","getPostComments","postId","a","fetch","response","json","postComments","removeComment","commentId","method","addComment","newComment","headers","body","JSON","stringify","NewCommentForm","setComments","comments","useState","name","setName","email","setEmail","setBody","isValidName","setIsValidName","isValidMessage","setIsValidMessage","handleInput","target","value","handleSubmit","event","preventDefault","trim","addedComment","newComments","onSubmit","placeholder","onChange","required","getUserPosts","endpoint","getPostDetails","postDetails","PostDetails","details","setPDetails","isVisibleComments","setIsVisibleComments","handleVisibilityComments","handleRemoveComment","updatedComments","filter","comment","Promise","all","userPostDetails","userPostComments","useEffect","length","UserSelect","setUserId","selectedUserId","setSelectedUser","handleUserSelect","App","setPosts","getPosts","userPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.75166181.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport { Post } from '../../types/Post';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId: number | null,\n  setSelectedPostId: (id: number | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId,\n  setSelectedPostId,\n}) => {\n  // const [selectedPost, setSelectedPost] = useState(selectedPostId);\n\n  const handleVisibilityOfDetails = useCallback((id: number) => {\n    if (selectedPostId === id) {\n      setSelectedPostId(null);\n    }\n\n    if (id !== selectedPostId) {\n      setSelectedPostId(id);\n    }\n\n    if (selectedPostId === null) {\n      setSelectedPostId(id);\n    }\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map((post) => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => handleVisibilityOfDetails(post.id)}\n            >\n              {selectedPostId === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\nimport { Comment } from '../types/Comment';\nimport { NewComment } from '../types/NewComment';\n\nexport const getPostComments = async (postId: number): Promise<Comment[]> => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n  const postComments: Comment[] = await response.json();\n\n  return postComments;\n};\n\nexport const removeComment = async (commentId: number): Promise<Comment> => {\n  const response = await fetch(\n    `${BASE_URL}/comments/${commentId}`,\n    { method: 'DELETE' },\n  );\n\n  return response.json();\n};\n\nexport const addComment = async (newComment: NewComment): Promise<Comment> => {\n  const response = await fetch(\n    `${BASE_URL}/comments/`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify(newComment),\n    },\n  );\n\n  return response.json();\n};\n","import React, { useCallback, useState } from 'react';\nimport { addComment } from '../../api/comments';\nimport { Comment } from '../../types/Comment';\nimport { NewComment } from '../../types/NewComment';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: number;\n  setComments: (newComments: Comment[]) => void;\n  comments: Comment[] | null;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  setComments,\n  comments,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isValidName, setIsValidName] = useState(true);\n  const [isValidMessage, setIsValidMessage] = useState(true);\n\n  const handleInput = useCallback((target: EventTarget\n  & (HTMLInputElement | HTMLTextAreaElement)) => {\n    switch (target.name) {\n      case 'name':\n        if (name !== target.value) {\n          setIsValidName(true);\n        }\n\n        setName(target.value);\n\n        break;\n\n      case 'body':\n        if (body !== target.value) {\n          setIsValidMessage(true);\n        }\n\n        setBody(target.value);\n\n        break;\n\n      case 'email':\n        setEmail(target.value);\n\n        break;\n\n      default:\n        break;\n    }\n  }, [name, email, body]);\n\n  const handleSubmit\n    = useCallback(async (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n\n      if (!name.trim()) {\n        setIsValidName(false);\n\n        return;\n      }\n\n      if (!body.trim()) {\n        setIsValidMessage(false);\n\n        return;\n      }\n\n      const newComment: NewComment = {\n        postId: selectedPostId,\n        name,\n        email,\n        body,\n      };\n\n      const addedComment = await addComment(newComment);\n      const newComments\n        = comments ? [...comments, addedComment] : [addedComment];\n\n      setComments(newComments);\n      setName('');\n      setEmail('');\n      setBody('');\n    }, [selectedPostId, comments]);\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => handleSubmit(event)}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => handleInput(target)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          value={email}\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => handleInput(target)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => handleInput(target)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n      <div className=\"NewCommentForm__error\">\n        {!isValidMessage && 'Please, enter a message'}\n        {!isValidName && 'Please, enter a name'}\n      </div>\n    </form>\n  );\n};\n","import { BASE_URL } from './api';\nimport { Post } from '../types/Post';\n\nexport const getUserPosts = async (userId: number): Promise<Post[]> => {\n  const endpoint = userId === 0 ? '/posts' : `/posts?userId=${userId}`;\n\n  const response = await fetch(`${BASE_URL}${endpoint}`);\n  const post: Post[] = await response.json();\n\n  return post;\n};\n\nexport const getPostDetails = async (postId: number): Promise<Post> => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n  const postDetails: Post = await response.json();\n\n  return postDetails;\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostComments, removeComment } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [details, setPDetails] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isVisibleComments, setIsVisibleComments] = useState(true);\n\n  const handleVisibilityComments = useCallback(() => {\n    setIsVisibleComments(!isVisibleComments);\n  }, [isVisibleComments]);\n\n  const handleRemoveComment = useCallback(async (commentId: number) => {\n    await removeComment(commentId);\n    const updatedComments\n      = comments?.filter((comment) => comment.id !== commentId) || null;\n\n    setComments(updatedComments);\n  }, [comments]);\n\n  const postDetails = useCallback(async () => {\n    const [userPostDetails, userPostComments] = await Promise.all([\n      getPostDetails(selectedPostId),\n      getPostComments(selectedPostId),\n    ]);\n\n    setPDetails(userPostDetails);\n    setComments(userPostComments);\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    setComments(comments);\n    postDetails();\n  }, [selectedPostId, comments]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{details?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleVisibilityComments}\n        >\n          {(comments && comments.length > 0) && (isVisibleComments\n            ? `Hide ${comments?.length} comments`\n            : `Show ${comments?.length} comments`)}\n\n          {(!comments || !comments.length) && 'No comments'}\n        </button>\n\n        <ul className=\"PostDetails__list\" data-cy=\"postDetails\">\n          {isVisibleComments && comments?.map((comment) => (\n            <li\n              className=\"PostDetails__list-item\"\n              key={comment.id}\n            >\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                onClick={() => handleRemoveComment(comment.id)}\n              >\n                X\n              </button>\n              <p>{comment.body}</p>\n            </li>\n          ))}\n        </ul>\n      </section>\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            setComments={setComments}\n            comments={comments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useCallback, useState } from 'react';\n\ntype Props = {\n  setUserId: (userId: number) => void;\n  setSelectedPostId: (id: number | null) => void;\n};\n\nexport const UserSelect: React.FC<Props> = ({\n  setUserId,\n  setSelectedPostId,\n}) => {\n  const [selectedUserId, setSelectedUser] = useState('0');\n\n  const handleUserSelect = useCallback((value: string) => {\n    setSelectedUser(value);\n    setUserId(+value);\n    setSelectedPostId(null);\n  }, []);\n\n  return (\n    <label>\n      Select a user: &nbsp;\n      <select\n        value={selectedUserId}\n        className=\"App__user-selector\"\n        onChange={({ target }) => handleUserSelect(target.value)}\n      >\n        <option value=\"0\">All users</option>\n        <option value=\"1\">Leanne Graham</option>\n        <option value=\"2\">Ervin Howell</option>\n        <option value=\"3\">Clementine Bauch</option>\n        <option value=\"4\">Patricia Lebsack</option>\n        <option value=\"5\">Chelsey Dietrich</option>\n        <option value=\"6\">Mrs. Dennis Schulist</option>\n        <option value=\"7\">Kurtis Weissnat</option>\n        <option value=\"8\">Nicholas Runolfsdottir V</option>\n        <option value=\"9\">Glenna Reichert</option>\n        <option value=\"10\">Leanne Graham</option>\n      </select>\n    </label>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect';\nimport { Post } from './types/Post';\nimport { getUserPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [userId, setUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n\n  const getPosts = useCallback(async () => {\n    const userPosts = await getUserPosts(userId);\n\n    setPosts(userPosts);\n  }, [userId]);\n\n  useEffect(() => {\n    setSelectedPostId(selectedPostId);\n    getPosts();\n  }, [userId, selectedPostId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          setUserId={setUserId}\n          setSelectedPostId={setSelectedPostId}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId && <PostDetails selectedPostId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}