{"version":3,"sources":["api/api.ts","api/posts.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/PostDetails/PostDetails.tsx","components/UserSelect/UserSelect.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getUserPosts","userId","a","endpoint","fetch","response","json","post","getPostDetails","postId","postDetails","Loader","className","PostsList","selectedUser","handleSelectedPost","selectedPostId","useState","posts","setPosts","isPostsLoaded","setIsPostsLoaded","getPosts","useCallback","userPosts","useEffect","map","isOpen","id","title","type","classNames","onClick","NewCommentForm","handleAddComment","name","setName","email","setEmail","body","setBody","isValidName","setIsValidName","isValidMessage","setIsValidMessage","handleInput","target","value","handleSubmit","event","preventDefault","trim","onSubmit","placeholder","onChange","required","getPostComments","postComments","removeComment","commentId","method","addComment","newComment","headers","JSON","stringify","PostDetails","details","setDetails","isDetailsLoading","setIsDetailsLoading","comments","setComments","isCommentsLoading","setIsCommentsLoading","isVisibleComments","setIsVisibleComments","handleVisibilityComments","Promise","all","userPostDetails","userPostComments","updateComments","handleRemoveComment","isComments","useMemo","length","comment","UserSelect","handleSelectedUser","App","setSelectedUser","setSelectedPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e5d351a.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\nimport { Post } from '../types/Post';\n\nexport const getUserPosts = async (userId: number): Promise<Post[]> => {\n  const endpoint = userId === 0 ? '/posts' : `/posts?userId=${userId}`;\n\n  const response = await fetch(`${BASE_URL}${endpoint}`);\n  const post: Post[] = await response.json();\n\n  return post;\n};\n\nexport const getPostDetails = async (postId: number): Promise<Post> => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n  const postDetails: Post = await response.json();\n\n  return postDetails;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../../types/Post';\nimport './PostsList.scss';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedUser: string;\n  handleSelectedPost: (id: number) => void;\n  selectedPostId: number | null;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUser,\n  handleSelectedPost,\n  selectedPostId,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isPostsLoaded, setIsPostsLoaded] = useState(false);\n\n  const getPosts = useCallback(async () => {\n    const userPosts = await getUserPosts(+selectedUser);\n\n    setPosts(userPosts);\n    setIsPostsLoaded(true);\n  }, [selectedUser]);\n\n  useEffect(() => {\n    getPosts();\n  }, [selectedUser]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {!isPostsLoaded && <Loader />}\n        {isPostsLoaded && posts.map((post) => {\n          const isOpen = selectedPostId === post.id;\n\n          return (\n            <li\n              key={post.id}\n              className=\"PostsList__item\"\n            >\n              <div>\n                <b>{`[User #${post.userId}]: `}</b>\n                {post.title}\n              </div>\n              <button\n                type=\"button\"\n                className={classNames(\n                  'PostsList__button', 'button',\n                  {\n                    'PostsList__user-button': isOpen,\n                  },\n                )}\n                onClick={() => handleSelectedPost(post.id)}\n              >\n                {isOpen ? 'Close' : 'Open'}\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport { NewComment } from '../../types/NewComment';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  handleAddComment: (newComment: NewComment) => void;\n  selectedPostId: number | null;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleAddComment,\n  selectedPostId,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isValidName, setIsValidName] = useState(true);\n  const [isValidMessage, setIsValidMessage] = useState(true);\n\n  const handleInput = useCallback(\n    (target: EventTarget & (HTMLInputElement | HTMLTextAreaElement)) => {\n      switch (target.name) {\n        case 'name':\n          if (name !== target.value) {\n            setIsValidName(true);\n          }\n\n          setName(target.value);\n          break;\n\n        case 'body':\n          if (body !== target.value) {\n            setIsValidMessage(true);\n          }\n\n          setBody(target.value);\n          break;\n\n        case 'email':\n          setEmail(target.value);\n          break;\n\n        default:\n          break;\n      }\n    }, [name, email, body],\n  );\n\n  const handleSubmit\n    = useCallback((event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n\n      if (!name.trim()) {\n        setIsValidName(false);\n\n        return;\n      }\n\n      if (!body.trim()) {\n        setIsValidMessage(false);\n\n        return;\n      }\n\n      if (selectedPostId) {\n        const newComment: NewComment = {\n          postId: selectedPostId,\n          name,\n          email,\n          body,\n        };\n\n        handleAddComment(newComment);\n        setName('');\n        setEmail('');\n        setBody('');\n      }\n    }, [selectedPostId, name, body, email]);\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => handleSubmit(event)}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => handleInput(target)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          value={email}\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => handleInput(target)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => handleInput(target)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n      <div className=\"NewCommentForm__error\">\n        {!isValidName && 'Please, enter a name'}\n        {!isValidMessage && 'Please, enter a message'}\n      </div>\n    </form>\n  );\n};\n","import { BASE_URL } from './api';\nimport { Comment } from '../types/Comment';\nimport { NewComment } from '../types/NewComment';\n\nexport const getPostComments = async (postId: number): Promise<Comment[]> => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n  const postComments: Comment[] = await response.json();\n\n  return postComments;\n};\n\nexport const removeComment = async (commentId: number): Promise<Comment> => {\n  const response = await fetch(\n    `${BASE_URL}/comments/${commentId}`,\n    { method: 'DELETE' },\n  );\n\n  return response.json();\n};\n\nexport const addComment = async (newComment: NewComment): Promise<Comment> => {\n  const response = await fetch(\n    `${BASE_URL}/comments/`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify(newComment),\n    },\n  );\n\n  return response.json();\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { addComment, getPostComments, removeComment } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport './PostDetails.scss';\nimport { Loader } from '../Loader';\nimport { NewComment } from '../../types/NewComment';\n\ntype Props = {\n  selectedPostId: number | null;\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [details, setDetails] = useState<Post | null>(null);\n  const [isDetailsLoading, setIsDetailsLoading] = useState(false);\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [isVisibleComments, setIsVisibleComments] = useState(true);\n\n  const handleVisibilityComments = useCallback(() => {\n    setIsVisibleComments(!isVisibleComments);\n  }, [isVisibleComments]);\n\n  const postDetails = useCallback(async () => {\n    if (selectedPostId) {\n      try {\n        setIsDetailsLoading(true);\n        const [userPostDetails, userPostComments] = await Promise.all([\n          getPostDetails(selectedPostId),\n          getPostComments(selectedPostId),\n        ]);\n\n        setDetails(userPostDetails);\n        setComments(userPostComments);\n      } finally {\n        setIsDetailsLoading(false);\n      }\n    } else {\n      setDetails(null);\n      setComments(null);\n    }\n  }, [selectedPostId]);\n\n  const updateComments = useCallback(async () => {\n    if (selectedPostId) {\n      const userPostComments = await getPostComments(selectedPostId);\n\n      setComments(userPostComments);\n    }\n  }, [selectedPostId]);\n\n  const handleRemoveComment = useCallback(async (commentId: number) => {\n    try {\n      setIsCommentsLoading(true);\n      await removeComment(commentId);\n    } finally {\n      setIsCommentsLoading(false);\n      updateComments();\n    }\n  }, [selectedPostId, comments]);\n\n  const handleAddComment = useCallback(async (newComment: NewComment) => {\n    try {\n      setIsCommentsLoading(true);\n      await addComment(newComment);\n    } finally {\n      setIsCommentsLoading(false);\n      updateComments();\n    }\n  }, [selectedPostId, comments]);\n\n  const isComments = useMemo(() => {\n    return comments && comments.length > 0;\n  }, [comments]);\n\n  useEffect(() => {\n    postDetails();\n  }, [selectedPostId]);\n\n  return (\n    <>\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n        {isDetailsLoading && <Loader />}\n        {!isDetailsLoading && (\n          <>\n            <section className=\"PostDetails__post\">\n              <p>{details?.body}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              {details?.body && !isComments && (\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__nocomments\n                  button\"\n                >\n                  No comments\n                </button>\n              )}\n\n              {details?.body && isComments && (\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={handleVisibilityComments}\n                >\n                  {isVisibleComments && `Hide ${comments?.length} comments`}\n                  {!isVisibleComments && `Show ${comments?.length} comments`}\n                </button>\n              )}\n\n              {isCommentsLoading && <Loader />}\n              {!isCommentsLoading && (\n                <ul className=\"PostDetails__list\" data-cy=\"postDetails\">\n                  {isVisibleComments && comments?.map((comment) => (\n                    <li\n                      className=\"PostDetails__list-item\"\n                      key={comment.id}\n                    >\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => handleRemoveComment(comment.id)}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </section>\n            {details?.body && (\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm\n                    handleAddComment={handleAddComment}\n                    selectedPostId={selectedPostId}\n                  />\n                </div>\n              </section>\n            )}\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  selectedUser: string;\n  handleSelectedUser: (id: string) => void;\n};\n\nexport const UserSelect: React.FC<Props> = ({\n  selectedUser,\n  handleSelectedUser,\n}) => {\n  return (\n    <label>\n      Select a user: &nbsp;\n      <select\n        value={selectedUser}\n        className=\"App__user-selector\"\n        onChange={({ target }) => handleSelectedUser(target.value)}\n      >\n        <option value=\"0\">All users</option>\n        <option value=\"1\">Leanne Graham</option>\n        <option value=\"2\">Ervin Howell</option>\n        <option value=\"3\">Clementine Bauch</option>\n        <option value=\"4\">Patricia Lebsack</option>\n        <option value=\"5\">Chelsey Dietrich</option>\n        <option value=\"6\">Mrs. Dennis Schulist</option>\n        <option value=\"7\">Kurtis Weissnat</option>\n        <option value=\"8\">Nicholas Runolfsdottir V</option>\n        <option value=\"9\">Glenna Reichert</option>\n        <option value=\"10\">Leanne Graham</option>\n      </select>\n    </label>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect';\n\nconst App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState('0');\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n\n  const handleSelectedPost = useCallback((id: number) => {\n    if (selectedPostId === id) {\n      setSelectedPostId(null);\n    } else {\n      setSelectedPostId(id);\n    }\n  }, [selectedPostId]);\n\n  const handleSelectedUser = useCallback((id: string) => {\n    setSelectedUser(id);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          selectedUser={selectedUser}\n          handleSelectedUser={handleSelectedUser}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUser={selectedUser}\n            handleSelectedPost={handleSelectedPost}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails selectedPostId={selectedPostId} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}